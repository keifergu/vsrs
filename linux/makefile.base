#########################################################
# check CONFIG parameter
#########################################################

ifneq ($(CONFIG), LIBRARY)
ifneq ($(CONFIG), CONSOLE)
CONFIG_ERR = TRUE
endif
endif

#########################################################
# executables used
#########################################################

CPP   	= g++
AR    	= ar
LD    	= $(CPP)
ASM		= nasm

#########################################################
# output file names and version information
#########################################################

ifeq ($(CONFIG), LIBRARY)
# the libraries that can be created
STAT_DEBUG_OUT    	= $(LIB_DIR)/lib$(PRJ_NAME)Staticd.a
STAT_RELEASE_OUT  	= $(LIB_DIR)/lib$(PRJ_NAME)Static.a
#
else 
ifeq ($(CONFIG), CONSOLE)
# the executables that can be created
STAT_DEBUG_OUT    = $(BIN_DIR)/$(PRJ_NAME)d
STAT_RELEASE_OUT  = $(BIN_DIR)/$(PRJ_NAME)
#
endif
endif


#########################################################
# c compiler flags
#########################################################

# default cpp flags for all configurations
#CPPFLAGS          = -Wall -fPIC $(DEFS) -I$(CURDIR)/$(INC_DIR) $(USER_INC_DIRS)
CPPFLAGS          = -fPIC $(DEFS) -I$(CURDIR)/$(INC_DIR) $(USER_INC_DIRS) -Wall -Wshadow -Wno-reorder -Wno-sign-compare
#
# debug cpp flags
# to address 64-bit build issues force a 32-bit build
CPU_ARCH := $(shell uname -m)
ifeq ($(CPU_ARCH),x86_64)
DEBUG_CPPFLAGS    = -g -D_DEBUG -m32
else
DEBUG_CPPFLAGS    = -g -D_DEBUG
endif

#
# release cpp
ifeq ($(CPU_ARCH),x86_64)
RELEASE_CPPFLAGS  =  -O3 -ffloat-store -DNDEBUG -Wuninitialized -m32
else
RELEASE_CPPFLAGS  =  -O3 -ffloat-store -DNDEBUG -Wuninitialized
endif

#########################################################
# assembler compiler flags
#########################################################

# default asm flags for all configurations
ASMFLAGS          = -f elf $(DEFS)
#
# debug asm flags
DEBUG_ASMFLAGS    = -g
#
# release asm flags
RELEASE_ASMFLAGS  =



#########################################################
# linker flags
#########################################################

# linker flags for all
ifeq ($(CPU_ARCH),x86_64)
ALL_LDFLAGS       = -Wall -m32 -lm -lstdc++
else
ALL_LDFLAGS       = -Wall -lm -lstdc++
endif

ifeq ($(CONFIG), LIBRARY)
# linker flags for library
# LDFLAGS           = $(ALL_LDFLAGS) -shared -Wl,-Bsymbolic
LDFLAGS           = $(ALL_LDFLAGS)
#
# debug linker flags for library
#DEBUG_LDFLAGS     = -Wl,-soname,lib$(PRJ_NAME)d.so.$(VER) !!
DEBUG_LDFLAGS     = 
#
# release linker flags for library
#RELEASE_LDFLAGS   = -Wl,-soname,lib$(PRJ_NAME).so.$(VER) !!
RELEASE_LDFLAGS   =
#
else
ifeq ($(CONFIG), CONSOLE)
# linker flags for console
LDFLAGS           = $(ALL_LDFLAGS)
#
# debug linker flags for console
DEBUG_LDFLAGS     =
#
# release linker flags for console
RELEASE_LDFLAGS   =
#
endif
endif



#########################################################
# objects that have to be created
#########################################################

# the object types that have to be created      
RELEASE_OBJS  = $(OBJS:.o=.r.o)
DEBUG_OBJS    = $(OBJS:.o=.d.o)


#########################################################
# rules
#########################################################

# suffixes
.SUFFIXES: .cpp .asm .r.o .d.o

#########################################################
# assembler rules
#########################################################


# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR)/%.asm
	$(ASM) $(ASMFLAGS) $(RELEASE_ASMFLAGS) -o $@ $<

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR)/%.asm
	$(ASM) $(ASMFLAGS) $(DEBUG_ASMFLAGS) -o $@ $<

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR1)/%.asm
	$(ASM) $(ASMFLAGS) $(RELEASE_ASMFLAGS) -o $@ $<

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR1)/%.asm
	$(ASM) $(ASMFLAGS) $(DEBUG_ASMFLAGS) -o $@ $<

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR2)/%.asm
	$(ASM) $(ASMFLAGS) $(RELEASE_ASMFLAGS) -o $@ $<

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR2)/%.asm
	$(ASM) $(ASMFLAGS) $(DEBUG_ASMFLAGS) -o $@ $<

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR3)/%.asm
	$(ASM) $(ASMFLAGS) $(RELEASE_ASMFLAGS) -o $@ $<

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR3)/%.asm
	$(ASM) $(ASMFLAGS) $(DEBUG_ASMFLAGS) -o $@ $<

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR4)/%.asm
	$(ASM) $(ASMFLAGS) $(RELEASE_ASMFLAGS) -o $@ $<

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR4)/%.asm
	$(ASM) $(ASMFLAGS) $(DEBUG_ASMFLAGS) -o $@ $<



#########################################################
# c rules
#########################################################

# Generate dependency files during compilation
# see also: http://make.paulandlesley.org/autodep.html
#    2005-01-25 Steffen Kamp (kamp@ient.rwth-aachen.de), RWTH Aachen
define COMPILE_AND_DEPEND_RELEASE
	$(CPP) -c -MMD -MF $(OBJ_DIR)/$*.r.d -MT $(OBJ_DIR)/$*.r.o $(CPPFLAGS) $(RELEASE_CPPFLAGS) -o $@ $(CURDIR)/$<
	@cp $(OBJ_DIR)/$*.r.d $(OBJ_DIR)/$*.r.P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(OBJ_DIR)/$*.r.d >> $(OBJ_DIR)/$*.r.P; \
		rm -f $(OBJ_DIR)/$*.r.d
endef
define COMPILE_AND_DEPEND_DEBUG
	$(CPP) -c -MMD -MF $(OBJ_DIR)/$*.d.d -MT $(OBJ_DIR)/$*.d.o $(CPPFLAGS) $(DEBUG_CPPFLAGS) -o $@ $(CURDIR)/$<
	@cp $(OBJ_DIR)/$*.d.d $(OBJ_DIR)/$*.d.P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(OBJ_DIR)/$*.d.d >> $(OBJ_DIR)/$*.d.P; \
		rm -f $(OBJ_DIR)/$*.d.d
endef

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR)/%.cpp
	$(COMPILE_AND_DEPEND_RELEASE)

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR)/%.cpp
	$(COMPILE_AND_DEPEND_DEBUG)

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR1)/%.cpp
	$(COMPILE_AND_DEPEND_RELEASE)

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR1)/%.cpp
	$(COMPILE_AND_DEPEND_DEBUG)

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR2)/%.cpp
	$(COMPILE_AND_DEPEND_RELEASE)

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR2)/%.cpp
	$(COMPILE_AND_DEPEND_DEBUG)

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR3)/%.cpp
	$(COMPILE_AND_DEPEND_RELEASE)

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR3)/%.cpp
	$(COMPILE_AND_DEPEND_DEBUG)

# create release objects
$(OBJ_DIR)/%.r.o: $(SRC_DIR4)/%.cpp
	$(COMPILE_AND_DEPEND_RELEASE)

# create debug objects
$(OBJ_DIR)/%.d.o: $(SRC_DIR4)/%.cpp
	$(COMPILE_AND_DEPEND_DEBUG)


#########################################################
# directory settings
#########################################################

ifeq ($(CONFIG), LIBRARY)
# directories that have to be created for a library
CHECK_DIRS = $(OBJ_DIR) $(LIB_DIR)
#
else
ifeq ($(CONFIG), CONSOLE)
# directories that have to be created for console and MFC
CHECK_DIRS = $(OBJ_DIR) $(BIN_DIR)
#
endif
endif


#########################################################
# targets
#########################################################

all:              	check_errors debug release

debug:            	check_errors \
					$(CHECK_DIRS) \
					$(STAT_DEBUG_OUT)

release:          	check_errors \
					$(CHECK_DIRS) \
					$(STAT_RELEASE_OUT)


#all:              	check_errors debug release
#
#debug:            	check_errors \
#					$(CHECK_DIRS) \
#					$(DYN_DEBUG_OUT) \
#					$(STAT_DEBUG_OUT)
#
#release:          	check_errors \
#					$(CHECK_DIRS) \
#					$(DYN_RELEASE_OUT) \
#					$(STAT_RELEASE_OUT)
#
#stat_debug:       	check_errors \
#					$(CHECK_DIRS) \
#					$(STAT_DEBUG_OUT)
#          
#dyn_debug:        	check_errors \
#					$(CHECK_DIRS) \
#					$(DYN_DEBUG_OUT)
#
#stat_release:     	check_errors \
#					$(CHECK_DIRS) \
#					$(STAT_RELEASE_OUT)
#        
#dyn_release:      	check_errors \
#					$(CHECK_DIRS) \
#					$(DYN_RELEASE_OUT)

##########################################################
# check for errors
##########################################################
check_errors:
	@if [ "$(CONFIG_ERR)" = "TRUE" ]; then\
		echo "Wrong CONFIG parameter specified: $(CONFIG)";\
		false;\
	fi


##########################################################
# create directories
##########################################################

$(OBJ_DIR):
	@if [ ! -d $(OBJ_DIR) ]; then\
		mkdir $(OBJ_DIR);\
	fi

$(LIB_DIR):
	@if [ ! -d $(LIB_DIR) ]; then\
		mkdir $(LIB_DIR);\
	fi

$(BIN_DIR):
	@if [ ! -d $(BIN_DIR) ]; then\
		mkdir $(BIN_DIR);\
	fi



##########################################################
# create output files
##########################################################

ifeq ($(CONFIG), LIBRARY)
#
# create static debug out
$(STAT_DEBUG_OUT): $(DEBUG_OBJS)
	$(AR) -crs $@ $(DEBUG_OBJS)
#
#
# create release debug out
$(STAT_RELEASE_OUT): $(RELEASE_OBJS)
	$(AR) -crs $@ $(RELEASE_OBJS)
#
#
#
#
#
#
#
else
ifeq ($(CONFIG), CONSOLE)
#
# added linked libraries to target prerequisites - $(*_PREREQS) variables - to force relinking when libraries have been rebuilt
#    2005-01-25 Steffen Kamp (kamp@ient.rwth-aachen.de), RWTH Aachen
#
# create static debug out
$(STAT_DEBUG_OUT): $(DEBUG_OBJS) $(STAT_DEBUG_PREREQS)
	$(LD) -o $@ $(LDFLAGS) $(DEBUG_LDFLAGS) $(DEBUG_OBJS) -L$(LIB_DIR) $(USER_LIB_DIRS) $(LIBS) $(DEBUG_LIBS) $(STAT_LIBS) $(STAT_DEBUG_LIBS)
#
#
# create static release out
$(STAT_RELEASE_OUT): $(RELEASE_OBJS) $(STAT_RELEASE_PREREQS)
	$(LD) -o $@ $(LDFLAGS) $(RELEASE_LDFLAGS) $(RELEASE_OBJS) -L$(LIB_DIR) $(USER_LIB_DIRS) $(LIBS) $(RELEASE_LIBS) $(STAT_LIBS) $(STAT_RELEASE_LIBS)
#
#
#
#
endif
endif

##########################################################
# delete all produced files
##########################################################

clean:
	/bin/rm -rf $(STAT_DEBUG_OUT)
	/bin/rm -rf $(STAT_RELEASE_OUT)
	/bin/rm -rf $(OBJ_DIR)
	/bin/rm -rf $(BIN_DIR)
	/bin/rm -rf $(LIB_DIR)



##########################################################
# include dependency files
##########################################################

-include $(OBJS:.o=.d.P)
-include $(OBJS:.o=.r.P)
